1.对package main执行go build，则在当前目录下会生成一个可执行文件（无论是否定义了$GOBIN），不会生成其他的中间的.a文件
2.对非pakage mian执行go build，则什么都不执行
3.对package main执行go install，则会生成一个可执行文件（如果定义了$GOBIN,则在$GOBIN目录下生成，如果没有定义$GOBIN，则在$GOPATH/bin目录下生成），同时在$GOPATH/pkg中生成中间定.a文件
4.对非package main执行go install,则会在$GPATH/pkg中生成.a文件

直接执行go build或者go install，则执行的是当前目录下的所有文件
执行go build package或者go install package，其中package为所执行在$GOPATH/src目录下中目录下的所有文件，package为目录的完整名称

对于go build和go install执行生成的文件名称是被执行文件所在的上一层目录的名称
对于import语句的名称也是目录的完整名称。与被执行的文件名无关

对于同一个目录中的文件，申明的package name。其中name必须为一个，对于package main所在的目录，也不能有多个main方法，在package main中的main方法可以直接调用其他package main中的非main方法。

在不同的目录下，可以有多个相同package名字（方法名也可以相同）。他们生成.a文件存放在$GOPATH/pkg中，按目录来区分
在不同的目录下，可以有多个package main，但是他们生成的可执行文件全部都放在$GOPATH/bin中，没有目录，如果package main文件的上层目录名称有相同的，则晚执行go install的文件会覆盖早执行go install的文件。

变量:
	var, :=
常量:
	const
boolean
	var valid bool = true
	available := false
数值：
	int(等同于int32),int8,int16,int32(rune,默认),int64
	uint8(byte),unit16,unit32,uint64
	float32,float64(默认)
	complex128,complex64
字符串:
	var value string = "yes"
	no, yes, maybe := "no", "yes", "maybe"
	s := "hello,"
	m := " world"
	a := s + m
	m := `hello
		world`(输出字面格式)
错误类型：
	err := errors.New("error")

分组操作：
	import (
	       "fmt"
	       "os"
	)
	
	const (
	      i = 100
	      pi = 3.14
	      prefix = "Go_"
	)
	
	var(
		i int
		pi float32
		prefix string
	)

除非被显示设置为其它值或者iota,每个const分组定的第一个常量被默认设置为它的0值，第二个后续常量被默认设置为它前面那个常量的值,如果前面那个常量的值是iota，那么它也被设为iota

iota用来申明enum，默认为0,每次调用加1，
const (
      x = iota // x == 0
      y = iota // y == 1
      z = iota // z == 2
      w	       // w == 3
)

const v = iota // 没遇到一个const关键字，iota会重置为0 v == 0



array：
	var arr [n]type
	var arr [10]int
	arr[0] = 42
	arr[1] = 13
	[3]int与[4]int是不同的类型
当把一个数组作为参数传入函数,传入的是数组的副本，不是它定指针，如果使用指针，就用slice
a := [3]int{1, 2, 3}
b := [10]int{1, 2, 3} //前三个元素为1,2,3,后面的为0
c := [...]int{4, 5, 6} // 用...来省略c长度
doubleArray := [2][4]{[4]int{1, 2, 3, 4}, [4]{5, 6, 7, 8}}
easyArray := [2][4]{{1, 2, 3, 4}, {5, 6, 7, 8}}

slice:
	slice不是一个数组，是一个引用，slice总是指向一个底层数组，申明slice不用指定长度，但是数组一定要指定长度。
	var fslice []int
	slice := []byte{'a', 'b', 'c', ‘d’}
slice像一个结构体，包含三个元素：
1.一个指针，指向数组中slice指定的开始位置
2.长度，slice的长度
3.最大长度，slice开始位置到数组的最后位置的长度

slice有几个内置的函数：
1.len：获取slice的长度
2.cap：获取slice的最大容量
3.append：向slice追加一个或多个元素，返回一个和slicey一样类型的slice
4.copy：从源slice的src中复制元素到目标dst,返回复制的元素个数
append会改变slice引用数组的内容，会影响同一数组的其它slice。
当slice没有剩余空间（cap - len == 0）时，会动态分配新的数组空间，返回的slice数组指针n将指向这个空间,而原数组的内容不变，其它引用此数组的slice不受影响。


map：
	map[keyType]valueType
	var number map[string]int
	numbers := make(map[string]int)
	numbers["one"] = 1
map是一种引用类型.len函数返回map键的数量，map是无序的，map["one"] = 11,用来修改map的值

rating := map[string]float32 {"C":5}
csharRating, ok := rating["Java"] //如果rating包含键Java,则ok为true，否则为false
delete(rating, "C") //删除key为C的元素


make用于内建类型（map，slice，channel）的内存分配
new用于各种类型内存分配

new(T) 分配了零值填充的T类型的内存空间，并且返回其地址，即一个*T类型的值,它返回一个指针，
指向新分配的类型T的零值

make只能创建map，slice。channel
内建函数make(T, args)返回一个有初始值（非零）的T类型,而不是*T。
导致map，slice，channel不同的原因是指向数据结构的引用在使用前必须被初始化。make初始化他们内部
的数据结构，填充适当的值。

if语句没有括号
	if x := computedValue(); x > 10 {
	  fmt.Println("x is greater than 10")
	} else {
	  fmt.Println("x is less than 10") 
	}
	fmt.Println(x) //x在此不能引用，它只在if语句内部起作用

	if condition {
	  statement
	} else if condition {
	  statement
	} else {
	  statement
	}

goto语句：
goto语句只能跳转到当前函数定义的标签，标签名大小写敏感

for语句：
for expression1; expression2; expression3 {
    statement
}

for语句可以用来循环读取数据，又可以当while来控制逻辑，也可以迭代
	sum := 1
	for ; sum < 1000; {
	    sum += sum
	}可以省略成
	for sum < 1000 {
	    sum += sum
	}相当与while语句

break和continue，break可以和标签一起用
for可以配合range
	for k, v := range map {
	    fmt.Println(“map's key:”,k)
	    fmt.Println("map's value:",v)
	}

switch语句：
	switch sExpr {
	case expr1:
	     some instructions
	case expr2:
	     some other instructions
	default:
	     other code
	}

case 后面可以接多个值，如 case 2, 3, 4
默认每个case最后都带有break,可以用fallthrough强制执行后面的case代码

函数：
func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) {
     return value1, value2
}

其中返回的变量可以省略，直接写成类型：(type1, type2)
如果只有一个返回值并且不声明返回值变量，则可以省略返回值的括号
如果没有返回值，则省略最后的返回信息
多于2个相同类型的变量或返回值，则可以写成一个，默认取离它最近的类型，如
func max(a, b int) int {
}其中a, b int代表a int, b int

如果在返回值写了变量名，则在函数体类有赋值，可以不用写return语句

可变参数：
func myfun(arg ...int) {
     for _, n := range arg {
     	 fmt.Printf("And the number is: %d\n", n)
     }
}其中arg是一个int的slice


在函数传递大的结构体时，可以用指针，它是一个8bytes的地址

defer语句：
在defer后指定的函数会在函数退出前调用，当函数执行到最后时，多个defer语句会按照逆序执行
for i := 0; i < 5; i++ {
    defer fmt.Printf("%d ", i)
}返回4 3 2 1 0，因为defer是用栈结构的

type：
可以用type来定义函数，它的类型是是所有拥有相同的参数，相同的返回值的一种类型函数。
type typeName func(input1 type1, input2 type2) (result1 type1, result2 type2)
type testInt func(int) bool

func isOdd(integer int) bool {
}

func isEven(integer int) bool {
}

可以在别的函数里申明类型为testInt,并且在调用函数时传递isOdd或者isEven


panic：
是一个内建函数，可以中断原有的控制流程，进入一个令人恐慌的流程中。当函数F调用panic，函数F的执行被中断，但是F中的延迟函数会正常执行，然后F返回到调用它的地方。在调用的地方，F的行为就像调用了panic。这一过程继续向上，直到发生panic的goroutine中所有调用的函数返回，此时程序退出。恐慌可以直接调用panic产生。也可以由运行时错误产生，例如访问越界的数组。

recover:
是一个内建的函数，可以让进入令人恐慌的流程中的goroutine恢复过来。recover仅在延迟函数中有效。在正常的执行过程中，调用recover会返回nil，并且没有其它任何效果。如果当前的goroutine陷入恐慌，调用recover可以捕获到panic的输入值，并且恢复正常的执行。

可以在函数的参数里定义func funcName(f func()) (b bool){}
可以在函数里执行匿名函数：
func() {
       // statement
}()

程序的初始化和执行起始与main包，如果main包还导入了其它包，则会在编译时将他们依次导入,当一个包被多个包导入，他们只会被导入一次，当一个包被导入时，如果该包还导入了其它的包，那么会先将其它包导入进来，然后再对这些包中的包级常量和变量进行初始化，接着执行init函数（如果有的话）,依次类推。等所有被导入的包都加载完毕了，就会开始对main包中的包级常量和变量进行初始化，然后执行main包的init函数,最后执行main函数

import加载：
1.相对路径：
	import "./model" //当前文件同一目录的model目录,不建议使用
2。绝对路径
	import "shorturl/model" // 加载gopath/src/shorturl/model模块

import (
       ."fmt"
)可以在函数里写成Println("hello, world")，省略fmt包名

import (
       f "fmt"
)别名，可以用f.Println("Hello,world")

import (
	"database/sql"
	_ “github.com/ziutek/mymysql/"
) _表示引入包，但是不直接使用包里的函数，而是调用该包里的init函数。


struct:
type person struct {
     name string
     age int
}

var P person
P.name = "irusist"
P.age = 26

struct的申明方式：
1.P := person{"Tom", 25}
2.P := person{age:25, name:"Tom"}

struct的匿名字段：
type Human struct {
     name string
     age int
     weight int
}

type Student struct {
     Human
     speciality string
}

mark := Student{Human{"Mark, 24,120}, "Computer Scienece"}
// 可以访问相应字段
fmt.Println("His name is ", mark.name)
fmt.Println("His speciality is ", mark.speciality)

// 修改字段
mark.Speciality = "AI"
mark.age = 21
mark.weight += 50

// 直接访问Human字段
mark.Human = Human{"Marcus", 55, 220}
mark.Human.age -= 1

struct的所有内置类型和自定义类型都可以作为匿名字段
type Skills []string
type Human struct {
     name string
     age int
     weight int
}

type Student struct {
     Human
     Skills
     int
     speciality string
}

//可以不用全部初始化
jane := Student{Human:Human{"Jane", 35, 100}, speciality:"Biology"} 
fmt.Println("Her name is ", jane.name)
fmt.Println("Her age is ", jane.age)
fmt.Println("Her speciality is", jane.speciality)

jane.Skills = []string{“anatomy”}
fmt.Println("Her skills are ", jane.Skills)
jane.Skills = append(jane.Skills, "physics", "golang")
jane.int = 3

如果struct和匿名字段有相同的字段，默认指的是struct内的字段，要表示匿名字段的，则需要显式指定
type Human struct {
     name string
     name int
     phone string
}
type Employee struct {
     Human
     speciality string
     phone string
}

Bob := Employee{Human{“Bob”， 34, “777-444-xxxx”}, "Designer", "333-222"}
fmt.Println(Bob.phone) // 333-222
fmt.Println(Bob.Human.,phone) // 777-444-xxxx



自定义类型
type typeName typeLiteral：
type ages int
type money float32
type months map[string]int
m := months{
  "January" : 31,
  "February" : 28,
  ...
}

const (
      WHITE = iota //0
      BLACK // 1(iota)
      BLUE // 2
      RED // 3
      YELLOW //4
)
type Coloe byte
func (v *Box) SetColor(c Color) {
     b.color = c
}
指针作为receiver:
	如果一个method的receiver是*T，你可以在一个T类型的实例变量V上调用这个method,而不需要&V去调用这个method（指针类型的method可以通过变量本身来调用，而不必用地址去调用，可以在方法内部用变量本身去赋值，而不必用*T = 2）
	如果一个method的receiver是T，可以在一个*T类型的变量P上调用这个方法，而不需要*P去调用这个method(变量的method可以通过这个变量的地址来调用)

method的继承：
type Human struct {
     name string 
     age int
     phone string
}
type Student struct {
     Human
     school string
}
type Employee stuct {
     Human
     company string
}

func (h *Human) sayHi() {
     fmt.println("dad")
}

mark := Student{Human{"Mark", 24, "2222-22e132"}, "MIT"}
sam := Employee{"Sam", 45, "112312"}, "Golang Inc"}
mark.  sayHi()
sam.SayHi()

method重写
func (e *Employee) sayHi() {
//
}

type Men interface {
     SayHi()
     Sing(lyries string)
}

所有类型都x实现了空的interface（interface{}）,它可以表示任何类型。

fmt.Prointln的参数是Stringer类型：
type Stringer interface {
     String() string
}


value, ok = element.(int)
其中value为变量的值，ok是一个bool类型，element是interface变量
如果element里面确实存储了T类型的数值,则ok返回true，否则返回false

swith value := element.(type) {
      case int:
      	   //
      case string:
      	   //
      default:
}

element.(type)只能用在switch语句中。


嵌入interface：
type Interface interface {
     sort.Interface //嵌入字段sort.Interface
     Push(x interface{}) //
     Pop() inteface{}
}

Inteface将sort.Interface所有的method隐式包含进来了。
sort.Interface:
type Interface interface {
     Len() int
     Less(i, j int)
     Swap(i, j int)
}


反射：「
var x float64 = 3.4
v := reflect.ValueOf(x)
v.Type() v.Kind() v.Float()

下面的语句会发生错误：
var x float64 = 3.4
v := reflect.ValueOf(x) // 传递的是引用，v的值不能改变
v.SetFloat(7.1) //不能修改

应该改成
var x float64 = 3.4
p := reflect.ValueOf(&x)
v := p.Elem()
v.SetFloat(7.1)


获取Request.Form值之前要调用Request.ParseForm()
Request.Form(会将URL的query-string字段和POST相同的参数名保存成一个slice)
Request.Form.Get(key)获取key的第一个值

Request.FormValue(key)获取key的第一个值，自动调用Request.ParseForm()

内置函数len

Request.Form对于空文本框，空文本区域以及文件上传，元素的值为空值
如果Request.Form是未选中的复选框和单选按钮，在Request.Form不会产生相应的条目，需要用Request.Form.Get()来获取值

strconv包
strconv.Atoi(r.Form.Get("age"))

正则包：
regexp.MatchString("^[0-9]+$", r.Form.Get("age"))

判断中文：
regexp.MatchString("^[\\x{4e00}-\\x{9fa5}]+$", r.Form.Get("realname"))

判断英文：
regexp.MatchString("^[a-zA-Z]+$", r.Form.Get("engname"))

电子邮件判断：
regexp.MatchString(`^([\w\.\_]{2, 10})@(\w{1,}).([a-z]{2,4})$`, r.Form.Get("email"))

手机号码判断：
regexp.MatchString(`(1[3|4|5|8][0-9]\d{4,8})$`, r.Form.Get("mobile"))

https://github.com/astaxie/beeku

时间和日期：
t := time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)
fmt.Printf("Go launched at %s\n", t.Local())

15位身份证号：
regexp.MatchString(`^(\d{15})$`, r.Form.Get("usercard"))
18位身份证号：
regexp.MatchString(`^(\d{17})([0-9]|X)$`, r.Form.Get("usercard"))


html/template:
func HTMLEscape(w io.Writer, b []byte) //把b进行转义之后写到w,用于输出到客户端
func HTMLEscapeString(s String) string // 转义s之后返回结果字符串
func HTMLEscaper(arg ...interface{}) string //  支持多个参数一起转义，返回结果字符串


text/template
// 生成一个名称为t的模板，{{.}}代表具体的内容 !{{end}}结束
t, _ := template.New("foo").Parse(`{{define "t"}} hello, {{.}}!{{end}}`)
t.ExecuteTemplate(w, "t", "<script>alert('you have been pwned')</script>")
客户端输出未转义的：hello, <script>alert('you have been pwned')</script>!

html/template
t, _ := template.New("foo").Parse(`{{define "t"}} hello, {{.}}!{{end}}`)
t.ExecuteTemplate(w, "t", template.HTML("<script>alert('you have been pwned')</script>"))
客户端输出未转义的：hello, <script>alert('you have been pwned')</script>!

html/template
t, _ := template.New("foo").Parse(`{{define "t"}} hello, {{.}}!{{end}}`)
t.ExecuteTemplate(w, "t", "<script>alert('you have been pwned')</script>")
客户端输出转义的：hello, &lt;script&gt;alert(&#39;you have been pwned&#39;)&lt;/script&gt;!


防止重复提交：
在模板里增加一个隐藏字段token(通过MD5（时间戳）)来获取唯一值，把这个值存储到服务器端的session来控制
currentTime := time.Now().Unix() // 生成时间戳
h := md5.New()
io.WriteString(h, strconv.FormatInt(currentTime, 10))
token := fmt.Sprintf("%x", h.Sum(nil))
t, _ := template.ParseFiles("login.gtpl")
t.Execute(w, token)

文件上传：
form的enctype属性：
application/x-www-form-urlencoded   // 表示在发送前编码所有字符（默认）
multipart/form-data // 不对字符编码。在使用包含文件上传空间的表单时，必须使用该值。
text/plain  // 空格转换为“+”加号，但不对特殊字符编码

处理文件上传：
r.ParseMultipartForm(32 << 20) 参数表示maxMemory，调用该方法后，上传的文件存储在maxMemory大小的内存里
如果文件超过了maxMemory，那么剩下的部分将存储在系统的临时文件中。

获取其他非文件字段信息的时候就不需要调用r.ParseForm，因为在需要的时候系统自动去调用，ParseMultipartForm
调用一次之后，之后的调用不会再有效果

可以用r.FormFile("uploadfile")获取上面的文件句柄，返回的是(multipart.File, *multipart.FileHeader, error)

返回的*multipart.FileHeader的Header的结果为(%v调用)
map[Content-Type:[application/pdf] Content-Disposition:[form-data; name="uploadfile"; filename="51CTO下载-智能Web算法.pdf"]]

os.OpenFile("./test/" + handler.Filename, os.O_WRONLY|os.O_CREATE, 0666)用于创建文件

io.Copy(f, file)用于复制文件

文件上传步骤：
1.form中增加enctype=“multipart/form-data”
2.服务器调用r.ParseMultipartForm，把上传文件存储在内存和临时文件中
3.使用r.FromFile获取文件句柄，对文件进行处理


用代码模拟浏览器上传步骤
1.生成buffer：                      bodyBuf := &bytes.Buffer{}
2.将buffer包装成multipart.Writer    bodyWriter := multipart.NewWriter(bodyBuf)
3.调用fileWriter, err := bodyWriter.CreateFormFile(fieldame, filename)生成如下的数据：
--boundary\r\n
Content-Disposition: form-data; name=fieldname; filename=filename\r\n
Content-Type: application/octet-stream\r\n
\r\n
4.调用fh, err := os.Open(filename)来获取文件句柄
5.调用_, err = io.Copy(fileWriter, fh) 将文件的字节数据传输到buffer中
6.调用contentType := bodyWriter.FormDataContentType()生成如下数据：
“multipart/form-data; boundary=boundary”
7.调用resp, err := http.Post(targetUrl, contentType, bodyBuf)，发送请求
8.调用resp_body, err := ioutil.ReadAll(resp.Body)获取返回的数据
9.resp.Status表示返回的状态

multipart.WriteField(fieldname, value string)可以写非文件字段




数据库：database/sql
1.sql.Register用来注册数据库驱动。当第三方开发者开发数据库驱动时,都会实现init函数，在init里面会调用这个
Register(name string, driver driver.Driver)完成本驱动的注册

    //https://github.com/mattn/go-sqlite3驱动
    func init() {
        sql.Register("sqlite3", &SQLiteDriver{})
    }

    //https://github.com/mikespook/mymysql驱动
    // Driver automatically registered in database/sql
    var d = Driver{proto: "tcp", raddr: "127.0.0.1:3306"}
    func init() {
        Register("SET NAMES utf8")
        sql.Register("mymysql", &d)
    }


    import (
          "database/sql"
          _ "github.com/mattn/go-sqlite3"
    )

    _表示引入后面的包名而不直接使用这个包中定义的函数，变量等资源。
    包在引入的时候会自动调用包的init函数以完成对包的初始化
    init函数相当于java中的静态变量，用_相当于java的Class.forName(Class),只初始化而不创建对象

2.driver.Driver是数据库驱动接口，定义了一个接口method: Open(name string),这个方法返回一个数据库的Conn接口。
    type Driver interface {
        Open(name String) (Conn, error)
    }
    返回的Conn只能进行一次goroutine的操作，不能应用于多个goroutine里面，如下代码错误的：
    go goroutineA(Conn) // 执行查询操作
    go goroutineB(Conn)  // 执行插入操作
3.driver.Conn是一个数据库连接的接口定义
    type Conn interface {
        Prepare(query string) (Stmt, error)
        Close() error
        Begin() (Tx, error)
    }

    Prepare函数返回与当前连接相关的执行sql语句的准备状态,可以进行查询，删除等操作
    Closeh函数关闭当前的连接，执行释放连接拥有的资源等清理工作，
    因为驱动实现了database/sql里面建议的conn pool，所以不用去实现缓存conn之类
    Begin函数返回一个代表事务处理的Tx，通过它可以进行查询，更新等操作,或者对事务进行回滚，提交
4.driver.Stmt是一种准备好的状态,和Conn相关联，而且只能用于一个goroutine中，不能用于多个goroutine
    type Stmt interface {
        Close() error
        NumInput() int
        Exec(args []value) (Result, error)
        Query(args []value) (Result, error)
    }
    Close函数关闭当前的链接状态，但是如果当前正在执行query，query还是有效返回rows数据
    NumInputh函数返回当前预留参数的个数,当返回>=0时数据库驱动就会智能检查调用者的参数，当数据库驱动包不知道
    预留参数的时候,返回-1
    Exec函数执行Prepare准备好的sql,传入参数执行update/insert等操作,返回Result数据
    Query函数执行Prepare准备好的sql,传入需要的参数执行select操作，返回Row结果集
5.driver.Tx
    事务一般就两个过程，提交和回滚
    type Tx interface {
        Commit() error
        Rollback() error
    }
6.driver.Execer,是Conn可以选择实现的接口
    type Execer interface {
        Exec(query string, args []Value) (Result, error)
    }
    如果这个接口没有定义，那么在调用DB.Exec，就会首先调用Prepare返回Stmt，然后执行Stmt的Exec，然后关闭Stmt
7.driver.Result，执行Update/Insert等操作返回的结果接口定义
    type Result interface {
        LastInsertId() (int64, error)
        RowsAffected() (int64, error)
    }
    LastInsertId函数返回由数据库执行插入操作得到的自增ID号
    RowsAffected函数返回query操作影响的数据条目数
8.driver.Rows，是执行查询返回的结果集接口定义
    type Row interface {
        Columns() []string
        Close() error
        Next(dest []Value) error
    }
    Columns函数返回查询数据库表的字段信息，这个返回的slice和sql查询的字段一一对应，而不是返回整个表的所有字段
    Close函数用来关闭Rows迭代器
    Next函数用来返回下一条数据，把数据赋值给dest，dest里面的数据必须是driver.Value的值除了string，返回
    的数据里面所有的string都必须要转换成[]byte，如果最后没有数据了，Next函数返回io.EOF
9.driver.RowsAffected,它是一个int64的别名，但是它实现了Result接口
    type RowsAffected int64
    func (RowsAffected) LastInsertId() (int64, error)
    func (v RowAffected) RowsAffected() (int64, error)
10.driver.Value
    type Value interface{}
    Value要么是nil,要么是下面的任意一种
    int64, float64, bool, []byte, string(除了Rows.Next返回的不能是string), time.Time
11.driver.ValueConverter接口定义了如何把一个普通的值转化为driver.Value的接口
    type ValueConverter interface {
        ConvertValue(v interface{}) (Value, error)
    }
    用处：
    1.转化driver.Value到数据库表相应的字段，如int64的数据如何转化成数据库表uint16字段
    2.把数据库查询结果转化成driver.Value值
    3.在scan函数里如何把driver.Value值转化成用户定义的值
12.driver.Valuer
    type Valuer interface {
        Value() (Value, error)
    }

13.
    type DB struct {
        driver driver.Driver
        dsn string
        mu sync.Mutex
        freeConn []driver.Conn
        closed bool
    }

    func (db *DB) Prepare(query string) (*Stmt, error)








